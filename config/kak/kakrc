##### LANGUAGE SERVER PROTOCOL #####
# has to be placed before colorscheme for custom UI colors to work

eval %sh{kak-lsp --kakoune -s $kak_session}

hook global WinSetOption filetype=(rust) %{
    lsp-enable-window
    lsp-diagnostic-lines-disable window

    set-option global lsp_hover_anchor true
    set-option global lsp_insert_spaces true

    # enable semantic tokens
    #hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    #hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    #hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    #hook -once -always window WinSetOption filetype=.* %{
    #    remove-hooks window semantic-tokens
    #}
}

##### COSMETICS #####
colorscheme dracula

### practical cosmetics ###
# prompt positioned at top, remove clippy art, no mouse
set global ui_options terminal_assistant=none terminal_status_on_top=true terminal_enable_mouse=false
set global startup_info_version 30000000 # don't fill screen with startup info

## custom modeline
# TODO: additional useful info:
# - git
# - more than one open client?
# - unsaved changes in an out-of-sight buffer?
# Shell implementation idea: Create a routine that, given a list of colors and strings, draws the bar correctly. If a string is empty, don't draw the corresponding element. Compute each string and call the routine.
set global modelinefmt '%sh{basename $kak_bufname} %val{cursor_char_column}:%val{cursor_line} %val{buf_line_count}≣ {{context_info}} {{mode_info}} [%opt{filetype}] %sh{dirname $kak_bufname} %val{session}' # 

# line numbers
add-highlighter -override global/ number-lines -hlcursor -min-digits 4 -separator "┆"
# highlight charlimit columns
hook global BufCreate .* %{
    add-highlighter buffer/ column 101 default,rgb:44475a
}
hook global BufSetOption filetype=(kak|markdown|gas|python) %{
    remove-highlighter buffer/column_101_default,rgb:44475a
    add-highlighter buffer/ column 81 default,rgb:44475a
}
# wraps lines, preserving words
#add-highlighter global/ wrap -word -indent
# show matching brackets
add-highlighter global/ show-matching
# show tabs, non-breaking spaces, etc
add-highlighter global/ show-whitespaces -spc ' ' -lf ' '
# highlight comment keywords
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+ub
# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

##### SETTINGS #####
# remove scratch buffer message on startup
hook global BufCreate "\*scratch\*" %{
    execute-keys <percent>d
}

# automatically reload files when they are modified
set-option global autoreload yes
# indent 4 chars at a time
set-option global indentwidth 4

##### COMMANDS #####
# Use 'o' (open) to edit a file.
# This is changed to avoid mistyping a `w`
# and destroying the file you wanted to open.
unalias global e edit
alias global o edit

##### KEYMAPS #####

# Not mapped: < > Y # ^ <del> <backspace> <ins> = ~ _

# Change the behavior of line selection
# x expands selections to contain full lines
# <a-x> trim selections to only contain full lines
# X expands to full lines, or extends selections to next lines if already full
# <a-X> selects the current lines, or the next lines if already full
map global normal x <a-x>
map global normal <a-x> <a-X>
map global normal <a-X> x

### Miscellaneous
map -docstring "enter LSP mode" global normal "'" ": enter-user-mode lsp<ret>"

map -docstring "jump backward" global goto z "<esc><c-o>"
map -docstring "jump forward" global goto x "<esc><c-i>"
map -docstring "save selection to jump list" global goto Z "<esc><c-s>"

map global normal <minus> _

### Object selection
map -docstring "select inner surrounding object" global normal m <a-i>
# Whole-object selection done by pressing `m` twice
map -docstring "select surrounding object" global object m "<esc><a-a>"

# we don't need three keybinds for every object to select,
# so we remap some selections to first-layer symbols
map -docstring "braces block" global object b B
map -docstring "sentence" global object . s
map -docstring "double quoted string" global object q Q

# swap repeat of selections with repeat of insertions
map global normal . <a-.>
map global normal <a-.> .

### Tabs
# tab indents both in normal mode and insert mode
map global normal <tab> "<gt>"
map global normal <s-tab> "<lt>"
# also indent whitespace lines in insert mode
map global insert <tab> "<a-;><a-gt>"
map global insert <s-tab> "<a-;><a-lt>"

# if a completion prompt is visible, tab will go to the next completion candidate
hook global InsertCompletionShow .* %{
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
}

# once the hook disappears, revert the behavior of tabs
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

### User mappings
map -docstring "yank to clipboard" global user y "<a-|>wl-copy<ret>"
map -docstring "paste from clipboard" global user p "<a-!>wl-paste<ret>"
map -docstring "remove trailing whitespace (bufferwide)" global user w '"dZ%s +$<ret>d "dz: nop<ret>'

# spellcheck
map -docstring "highlight spelling errors" global user c ': spell<ret>'
map -docstring "clear spelling highlights" global user x ': spell-clear<ret>'
map -docstring "spelling replacement suggestions" global user r ': spell-replace<ret>'
map -docstring "jump to next spelling error" global user n ': spell-next<ret>'

# remap all regex commands to be case-insensitive by default
# inserts a small prefix that can be cancelled with <c-u>
map -docstring 'case insensitive search' global normal '/' /(?i)
map -docstring 'case insensitive backward search' global normal '<a-/>' <a-/>(?i)
map -docstring 'case insensitive extend search' global normal '?' ?(?i)
map -docstring 'case insensitive backward extend-search' global normal '<a-?>' <a-?>(?i)
map -docstring 'case insensitive select' global normal 's' s(?i)
map -docstring 'case insensitive split selections' global normal '<a-s>' S(?i)
map -docstring 'case insensitive keep selections' global normal '<a-k>' <a-k>(?i)
map -docstring 'case insensitive drop selections' global normal '<a-K>' <a-K>(?i)

# Swap line splitting and regex splitting. Line splitting is ten times more common.
map -docstring "split selections on line boundaries" global normal S <a-s>
map -docstring "split selections with the given regex" global normal <a-s> S
