##### LANGUAGE SERVER PROTOCOL #####
eval %sh{kak-lsp --kakoune -s $kak_session}

#set-option global lsp_diagnostic_line_warning_sign " "
set-option global lsp_diagnostic_line_error_sign "→"
set-option global lsp_hover_anchor true
set-option global lsp_insert_spaces true
hook global WinSetOption filetype=(rust) %{
    lsp-enable-window
    lsp-diagnostic-lines-disable window

    set-option global lsp_server_configuration rust.clippy_preference="on"
}

# enable semantic tokens
hook global WinSetOption filetype=(rust) %{
  hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
  hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
  hook -once -always window WinSetOption filetype=.* %{
    remove-hooks window semantic-tokens
  }
}

##### SETTINGS #####
# remove scratch buffer message on startup
hook global BufCreate "\*scratch\*" %{
    execute-keys XXd
}

# automatically reload files when they are modified
set-option global autoreload yes
set-option global indentwidth 4
# keep a few lines visible above/below cursor when scrolling
set-option global scrolloff 3,0

##### KEYMAPS #####

# Not mapped: < > Y # ^ <del> <backspace> <ins> <ret> _

# swap line selections
map global normal x <a-x>
map global normal <a-x> x

# Unmap the keys that have been remapped.
map global normal <gt> ''
map global normal <lt> ''
map global normal _ ''
map global normal <a-{> ''
map global normal <a-}> ''

### Miscellaneous
map -docstring "enter LSP mode" global normal "." ": enter-user-mode lsp<ret>"
map -docstring "unselect surrounding whitespace" global normal <minus> _
map -docstring "repeat last insert mode change" global normal <plus> .
map -docstring "choose a register for the next operation" global normal = '"'

### Object selection
# TODO: Find the least-resistance way of doing object selections. Consider which selections are most common, etc.
# <Shift> is changed to mean "inner object". <Alt> is banished.
# I generally want to extend my current object selection rather than jump to the next object.
# The exception to the rule is when navigating through paragraphs, but I can just press semicolon to deselect when necessary.
map -docstring "select inner object" global normal '"' <a-i>
map -docstring "select whole object" global normal "'" <a-a>
map -docstring "extend selections to whole object start" global normal [ {
map -docstring "extend selections to whole object end" global normal ] }
map -docstring "extend selections to inner object start" global normal { <a-{>
map -docstring "extend selections to inner object end" global normal } <a-}>

# we don't need three keybinds for every object to select, so we remap some selections to first-layer symbols
map -docstring "braces block" global object b B
map -docstring "paragraph" global object g p
map -docstring "parenthesis block" global object p "("

# soft unmap a bunch of objects that we don't use. wish they could be properly unmapped
map global object ( ''
map global object ) ''
map global object { ''
map global object } ''
map global object [ ''
map global object ] ''
map global object <lt> ''
map global object <gt> ''
map global object Q ''
map global object q ''
map global object B ''

### Tabs
# tab indents both in normal mode and insert mode
map global normal <tab> "<gt>"
map global normal <s-tab> "<lt>"
# also indent whitespace lines in insert mode
map global insert <tab> "<a-;><a-gt>"
map global insert <s-tab> "<a-;><a-lt>"

# if a completion prompt is visible, tab will go to the next completion candidate
hook global InsertCompletionShow .* %{
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
}

# once the hook disappears, revert the behavior of tabs
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# Swap line splitting and regex splitting. Line splitting is ten times more useful.
map -docstring "split selections on line boundaries" global normal S <a-s>
map -docstring "split selections with the given regex" global normal <a-s> S

### User mappings
# yanking and putting to clipboard
map -docstring "yank to clipboard" global user y "<a-|>wl-copy<ret>"
map -docstring "paste from clipboard" global user p "<a-!>wl-paste<ret>"

# remove trailing whitespace
map -docstring "remove trailing whitespace (bufferwide)" global user w 'Z%s +\n<ret>Hd z: nop<ret>'

##### COSMETICS #####
colorscheme kalm

### practical cosmetics ###
# prompt positioned at top, disable mouse input, remove clippy art
set global ui_options ncurses_assistant=none ncurses_status_on_top=true ncurses_enable_mouse=false

# Custom title, if that ever gets implemented
#hook global WinDisplay .* %{ evaluate-commands %sh{
#    buffer=$(basename "$kak_bufname" | cat)
#    echo set-option -add buffer ui_options "'ncurses_set_title=$buffer'"
#} }

## custom modeline
# TODO: additional useful info:
# - git
# - more than one open client?
# - unsaved changes in an out-of-sight buffer?
# Shell implementation idea: Create a routine that, given a list of colors and strings, draws the bar correctly. If a string is omitted, don't draw the corresponding element. Compute each string and call the routine.
set global modelinefmt '{MenuBackground} %sh{basename $kak_bufname} %val{cursor_char_column}:%val{cursor_line} %val{buf_line_count}≣ {{context_info}} {{mode_info}} [%opt{filetype}] %sh{dirname $kak_bufname} %val{session}' # 

# line numbers
add-highlighter -override global/ number-lines -hlcursor -min-digits 4 -separator " "
# wraps lines, preserving words
#add-highlighter global/ wrap -word -indent
# show matching brackets
add-highlighter global/ show-matching
# show tabs, non-breaking spaces, etc
add-highlighter global/ show-whitespaces -spc ' ' -lf ' '
# highlight comment keywords
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+ub
# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error
